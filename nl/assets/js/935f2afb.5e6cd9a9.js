"use strict";(self.webpackChunkmindspaces=self.webpackChunkmindspaces||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"(nl) Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/nl/docs/intro","docId":"intro"},{"type":"link","label":"Getting Started","href":"/nl/docs/getting-started/","docId":"getting-started/index"},{"type":"category","label":"(nl) Research","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"UX Research","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"User demographics","href":"/nl/docs/research/UX/demographics","docId":"research/UX/demographics"},{"type":"link","label":"User feedback","href":"/nl/docs/research/UX/feedback","docId":"research/UX/feedback"},{"type":"link","label":"System functionality","href":"/nl/docs/research/UX/functionality","docId":"research/UX/functionality"},{"type":"link","label":"User goals and tasks","href":"/nl/docs/research/UX/goals","docId":"research/UX/goals"},{"type":"link","label":"Technical requirements","href":"/nl/docs/research/UX/technicalreqs","docId":"research/UX/technicalreqs"},{"type":"link","label":"User interface design","href":"/nl/docs/research/UX/uid","docId":"research/UX/uid"}],"href":"/nl/docs/research/UX/"},{"type":"category","label":"(nl) Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Microservices","href":"/nl/docs/research/architecture/microservices","docId":"research/architecture/microservices"},{"type":"link","label":"Serverless","href":"/nl/docs/research/architecture/serverless","docId":"research/architecture/serverless"}],"href":"/nl/docs/research/architecture/"},{"type":"category","label":"Distributed Communication","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"REST","href":"/nl/docs/research/distributed communication/rest","docId":"research/distributed communication/rest"},{"type":"link","label":"tRPC","href":"/nl/docs/research/distributed communication/trpc","docId":"research/distributed communication/trpc"},{"type":"link","label":"GraphQL","href":"/nl/docs/research/distributed communication/graphql","docId":"research/distributed communication/graphql"}],"href":"/nl/docs/research/distributed communication/"},{"type":"category","label":"Languages","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"C#\u200e","href":"/nl/docs/research/languages/csharp","docId":"research/languages/csharp"},{"type":"link","label":"Dart","href":"/nl/docs/research/languages/dart","docId":"research/languages/dart"},{"type":"link","label":"ELM","href":"/nl/docs/research/languages/elm","docId":"research/languages/elm"},{"type":"link","label":"Go","href":"/nl/docs/research/languages/go","docId":"research/languages/go"},{"type":"link","label":"Java","href":"/nl/docs/research/languages/java","docId":"research/languages/java"},{"type":"link","label":"JavaScript","href":"/nl/docs/research/languages/javascript","docId":"research/languages/javascript"},{"type":"link","label":"Rust","href":"/nl/docs/research/languages/rust","docId":"research/languages/rust"},{"type":"link","label":"TypeScript","href":"/nl/docs/research/languages/typescript","docId":"research/languages/typescript"}],"href":"/nl/docs/research/languages/"}],"href":"/nl/docs/research/"},{"type":"link","label":"Design","href":"/nl/docs/design/","docId":"design/index"},{"type":"category","label":"(nl) Development","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Version Control","href":"/nl/docs/development/git","docId":"development/git"},{"type":"category","label":"Tooling","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Documentation","href":"/nl/docs/development/tooling/docs","docId":"development/tooling/docs"}],"href":"/nl/docs/development/tooling/"}],"href":"/nl/docs/development/"},{"type":"link","label":"Glossary","href":"/nl/docs/glossary","docId":"glossary"}]},"docs":{"design/index":{"id":"design/index","title":"Design","description":"","sidebar":"tutorialSidebar"},"development/git":{"id":"development/git","title":"Version Control","description":"For our version control system, we use Git. Git is a distributed version control system that allows us to track changes to the codebase. It also allows us to collaborate with other developers on the project. For more information about Git, please visit the Git Website.","sidebar":"tutorialSidebar"},"development/index":{"id":"development/index","title":"Development","description":"Ensuring that the codebase is well-structured and easy to understand is a key part of the development process. This section contains information about the tools and processes that we use to achieve this.","sidebar":"tutorialSidebar"},"development/tooling/docs":{"id":"development/tooling/docs","title":"Documentation","description":"Reading, writing, and maintaining documentation is an important part of any project. This section will help you get started with the documentation for MindSpaces. The documentation is written in Markdown and is located in the docs directory. The documentation is built using Docusaurus, which is a static site generator. The documentation is built and deployed to GitHub Pages.","sidebar":"tutorialSidebar"},"development/tooling/index":{"id":"development/tooling/index","title":"Tooling","description":"We use a lot of different tools to develop MindSpaces. This section contains","sidebar":"tutorialSidebar"},"getting-started/index":{"id":"getting-started/index","title":"Getting Started","description":"Before you can start developing, you need to setup your development environment. This section will help you do that. MindSpaces uses a lot of different technologies, so it can be a bit overwhelming at first. But don\'t worry, we will guide you through the process.","sidebar":"tutorialSidebar"},"glossary":{"id":"glossary","title":"Glossary","description":"The glossary is organized alphabetically, so you can quickly find the definition you need. Each definition includes a brief explanation of the term or concept, along with any related terms or concepts that may be helpful to know.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"This is documentation for developers. If you are looking for documentation for users, please visit the User Guide.","sidebar":"tutorialSidebar"},"research/architecture/index":{"id":"research/architecture/index","title":"Architecture","description":"This section contains information about the architecture of MindSpaces. For our","sidebar":"tutorialSidebar"},"research/architecture/microservices":{"id":"research/architecture/microservices","title":"Microservices","description":"","sidebar":"tutorialSidebar"},"research/architecture/serverless":{"id":"research/architecture/serverless","title":"Serverless","description":"","sidebar":"tutorialSidebar"},"research/distributed communication/graphql":{"id":"research/distributed communication/graphql","title":"GraphQL","description":"GraphQL is a query language and runtime for APIs that allows clients to request and receive only the data they need. It does this by having a strict schema from which the client selects each field they want from a request. This allows the client to fetch exactly what they need and they don\'t over- or under-fetch the data. Because of this, GraphQL is a very powerful tool, but with powerful tools, there are often other drawbacks.","sidebar":"tutorialSidebar"},"research/distributed communication/index":{"id":"research/distributed communication/index","title":"Distributed Communication","description":"This section contains research about the communication between our distributed system (backend) and our front-end, in the research we are considering three options:","sidebar":"tutorialSidebar"},"research/distributed communication/rest":{"id":"research/distributed communication/rest","title":"REST","description":"REST (Representational State Transfer) is a software architectural style that is commonly used for creating web services. It is based on the HTTP protocol and uses HTTP methods and responses to enable communication between client and server. REST provides a standard interface for accessing and manipulating resources.","sidebar":"tutorialSidebar"},"research/distributed communication/trpc":{"id":"research/distributed communication/trpc","title":"tRPC","description":"tRPC, or Typescript Remote Procedure Call, is an alternative to REST or GraphQL that provides type safety between the front-end and back-end.","sidebar":"tutorialSidebar"},"research/index":{"id":"research/index","title":"Research","description":"","sidebar":"tutorialSidebar"},"research/languages/csharp":{"id":"research/languages/csharp","title":"C#\u200e","description":"\u200e","sidebar":"tutorialSidebar"},"research/languages/dart":{"id":"research/languages/dart","title":"Dart","description":"Dart is a programming language developed by Google. It is used to develop web applications, mobile applications, desktop applications, and more.","sidebar":"tutorialSidebar"},"research/languages/elm":{"id":"research/languages/elm","title":"ELM","description":"ELM is a functional programming language that compiles to JavaScript. It is used to develop web applications, mobile applications, desktop applications, and more.","sidebar":"tutorialSidebar"},"research/languages/go":{"id":"research/languages/go","title":"Go","description":"Go is a general-purpose programming language developed by Google. It is used to make scalable network services. It is used to develop web applications, mobile applications, desktop applications, and more.","sidebar":"tutorialSidebar"},"research/languages/index":{"id":"research/languages/index","title":"Languages","description":"The choice of programming language is a critical decision in software development. It affects the development process, the performance of the resulting software, and the ease of maintenance and expansion. As such, selecting the right programming language is a complex task that requires careful consideration of multiple factors. On this page, we will outline the programming languages that we considered for our project and the reasoning behind our final decision. We will explore the advantages and disadvantages of each language, as well as the criteria that we used to evaluate them.","sidebar":"tutorialSidebar"},"research/languages/java":{"id":"research/languages/java","title":"Java","description":"Java is a general-purpose programming language developed by Oracle. Unlike C#, it follows the \\"compile once, run anywhere\\" paradigm. It is used to develop web applications, mobile applications, desktop applications, and more.","sidebar":"tutorialSidebar"},"research/languages/javascript":{"id":"research/languages/javascript","title":"JavaScript","description":"JavaScript is a popular programming language for frontend development, but it has both advantages and disadvantages when it comes to meeting the criteria for selecting a programming language.","sidebar":"tutorialSidebar"},"research/languages/rust":{"id":"research/languages/rust","title":"Rust","description":"Rust is a general-purpose programming language originally developed by Mozilla. It is used to develop web applications, mobile applications, desktop applications, and more.","sidebar":"tutorialSidebar"},"research/languages/typescript":{"id":"research/languages/typescript","title":"TypeScript","description":"TypeScript is a superset of JavaScript that adds optional static typing and class-based object-oriented programming to the language. It is used to develop web applications, mobile applications, desktop applications, and more.","sidebar":"tutorialSidebar"},"research/UX/demographics":{"id":"research/UX/demographics","title":"User demographics","description":"The users of the MindSpaces reservation system come from a variety of industries and sectors, including healthcare, education, technology, and finance. Within these industries, users may include employees from different departments, teams, or external parties who need to reserve meeting rooms, workspaces, or other spaces for their activities.","sidebar":"tutorialSidebar"},"research/UX/feedback":{"id":"research/UX/feedback","title":"User feedback","description":"User feedback is an essential part of the design process for the MindSpaces reservation system. Throughout the whole process, we will actively solicit user feedback and incorporate it into the design of the reservation system.","sidebar":"tutorialSidebar"},"research/UX/functionality":{"id":"research/UX/functionality","title":"System functionality","description":"To create a reservation system that meets the needs of users, it is essential to identify the key features and functionality that they will require. Based on our research and user feedback, some of the features and functionality that we have identified include:","sidebar":"tutorialSidebar"},"research/UX/goals":{"id":"research/UX/goals","title":"User goals and tasks","description":"Definition of the user groups","sidebar":"tutorialSidebar"},"research/UX/index":{"id":"research/UX/index","title":"UX Research","description":"This section contains information about the UX Research of MindSpaces.","sidebar":"tutorialSidebar"},"research/UX/technicalreqs":{"id":"research/UX/technicalreqs","title":"Technical requirements","description":"When designing the MindSpaces reservation system, it is important to consider the technical requirements necessary for its successful implementation and use. Some of the technical requirements we will consider include compatibility with different devices and browsers, as well as data security and privacy.","sidebar":"tutorialSidebar"},"research/UX/uid":{"id":"research/UX/uid","title":"User interface design","description":"User interface design research is an essential part of the development process for the MindSpaces reservation system. The user interface (UI) is the visual and interactive aspect of the system that users interact with, and it can have a significant impact on the user experience.","sidebar":"tutorialSidebar"}}}')}}]);